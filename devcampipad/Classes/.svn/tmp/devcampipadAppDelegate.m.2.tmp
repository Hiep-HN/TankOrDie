//
//  devcampipadAppDelegate.m
//  devcampipad
//
//  Created by Brad Smith on 4/16/10.
//  Copyright Clixtr 2010. All rights reserved.
//

#import "devcampipadAppDelegate.h"
#import <GameKit/GameKit.h>
#import "PlayerView.h"
#import "Bullet.h"
#import "SlaveBoard.h"

@implementation devcampipadAppDelegate

@synthesize window, serverPeerID;
@synthesize session;
@synthesize bullets;

- (void)dealloc {
	[bullets release];
	[connectedPeers release];
    [window release];
    [super dealloc];
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {    
	[UIApplication sharedApplication].idleTimerDisabled = YES;
	[NSTimer scheduledTimerWithTimeInterval:FRAMERATE target:self selector:@selector(timerFired) userInfo:nil repeats:YES];
	stopButton.hidden = YES;
	
	[self setBullets:[NSMutableArray arrayWithCapacity:100]];
	
	connectedBoards = [[NSMutableDictionary alloc] init];
	connectedPeers = [[NSMutableDictionary alloc] init];
	
	peerCountLabel.text = @"0";
	
	clientModeSessionHandler = [[ClientModeSessionHandler alloc] init];
	
	//Adversie as a server
	
    [window makeKeyAndVisible];
    
    return YES;
}

- (void)applicationWillTerminate:(UIApplication *)application {
	[session disconnectFromAllPeers];
	session.available = NO;
	[session setDataReceiveHandler: nil withContext: nil];
	session.delegate = nil;
	[session release];
}



-(void) timerFired {
	for(NSString *aKey in connectedPeers) {
		[[connectedPeers valueForKey:aKey] update];
	}
	
	for (int i = 0; i < [bullets count]; i++) {
		Bullet *bullet = [bullets objectAtIndex:i];
		[bullet update];
		if ([bullet isHidden]) {
			//[bullet removeFromSuperview];
			//[bullets removeObjectAtIndex:i];
		}
	}			
}

/* Notifies delegate that a connection type was chosen by the user.
 */
- (void)peerPickerController:(GKPeerPickerController *)picker didSelectConnectionType:(GKPeerPickerConnectionType)type{
	//NSLOG(
}

/* Notifies delegate that the connection type is requesting a GKSession object.
 
 You should return a valid GKSession object for use by the picker. If this method is not implemented or returns 'nil', a default GKSession is created on the delegate's behalf.
 */
- (GKSession *)peerPickerController:(GKPeerPickerController *)picker sessionForConnectionType:(GKPeerPickerConnectionType)type{
	if (actingAsServer) {
		return nil;
	}
	// we're a client to another ipad server
	session = [[[GKSession alloc] initWithSessionID:@"wangchung" displayName:nil sessionMode:GKSessionModePeer] autorelease];
	[session setDelegate:self];
	[session setDataReceiveHandler:self withContext:nil];
	return session;
}

/* Notifies delegate that the peer was connected to a GKSession.
 */
- (void)peerPickerController:(GKPeerPickerController *)picker didConnectPeer:(NSString *)peerID toSession:(GKSession *)session{
	if (actingAsServer) {
		return;
	}
	NSLog(@"session wtf: %@", session);
	[peerPicker dismiss];
	//[upButton setHidden:NO];
	//[searchButton setHidden:NO];
}


/* Notifies delegate that the user cancelled the picker.
 */
- (void)peerPickerControllerDidCancel:(GKPeerPickerController *)picker{
}

- (void)session:(GKSession *)session didReceiveConnectionRequestFromPeer:(NSString *)peerID {
	if (actingAsServer) {
		[session acceptConnectionFromPeer:peerID error:nil];	
	}
}


- (void)session:(GKSession *)session peer:(NSString *)peerID didChangeState:(GKPeerConnectionState)state {
	if (actingAsServer) {
		switch (state) {
			case GKPeerStateAvailable:
				break;
			case GKPeerStateUnavailable:
				break;
			case GKPeerStateConnected: {
				//TODO 'send data to peer (old test button')
				[self requestConnectingClientIdentity];
				break;
			}
			case GKPeerStateDisconnected:
				[[connectedPeers objectForKey:peerID] removeFromSuperview];
				[connectedPeers removeObjectForKey:peerID];
				[connectedBoards removeObjectForKey:peerID];
				[self updateLabels];
				
				break;
			case GKPeerStateConnecting:
				break;
			default:
				break;
		}
		return;
	}
}

- (void) updateLabels {
	peerCountLabel.text = [NSString stringWithFormat:@"%i",connectedPeers.count];
	boardCountLabel.text = [NSString stringWithFormat:@"%i",connectedBoards.count];
}

-(void) receiveData:(NSData *)data fromPeer:(NSString *)peerId inSession:(GKSession *)session context:(id)context {
	PlayerView *player = [connectedPeers objectForKey:peerId];
    
   NSString *command = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
	NSArray *argv = [command componentsSeparatedByString:@":"];
	
	if ([command isEqualToString:@"confirmiPad"]) {
		[self confirmiPad:peerId];
		return;
	}

	NSLog(@"command: %@",[argv objectAtIndex:0]);
	NSLog(@"args", argv);
	
	SEL selector = NSSelectorFromString([NSString stringWithFormat:@"%@:",[argv objectAtIndex:0]]);
	
	if ([player respondsToSelector:selector]) {
		if (argv.count == 1)
			[player performSelector:selector];
		if (argv.count == 2)
			[player performSelector:selector withObject:[argv objectAtIndex:1]];
	}
	else if ([self respondsToSelector:selector]) {
			[self performSelector:selector withObject:peerId];
		if (argv.count == 3)
			NSLog(@"args: %@",[argv objectAtIndex:1]);
			[self performSelector:selector withObject:player withObject:[argv objectAtIndex:1]];
	}
	else if ([clientModeSessionHandler respondsToSelector:selector]) {
		if (argv.count == 1)
			[clientModeSessionHandler performSelector:selector];
		if (argv.count == 2)
			[clientModeSessionHandler performSelector:selector withObject:[argv objectAtIndex:1]];
	}	
	else {
		NSLog(@"PROTOCAL ERROR command = (%@)",command);
	}
}

-(void) confirmiPad:(NSString *) peerId {
	if (!peerId) {
		return; 
	}
	//UIAlertView *a = [[UIAlertView alloc] initWithTitle:@"" message:@"Confirmed that client is ipad" delegate:nil cancelButtonTitle:@"ok" otherButtonTitles:nil];
	//[a show];
	//[a release];
	
	SlaveBoard *newSlave = [[SlaveBoard alloc] initWithPeerId:peerId];
	[lastBoard attachBoard:newSlave inDirection:arc4random()%4];
	lastBoard = newSlave;
	[connectedBoards setObject:newSlave forKey:peerId];
	[newSlave release];
	[self updateLabels];
}

-(void) confirmiPhone:(NSString *) peerID {
	if (!peerID) {
		return; 
	}
	//UIAlertView *a = [[UIAlertView alloc] initWithTitle:peerID message:@"Confirmed that client is iphone" delegate:nil cancelButtonTitle:@"ok" otherButtonTitles:nil];
	//[a show];
	//[a release];
	
	PlayerView *p = [[PlayerView alloc] init];
	[connectedPeers setObject:p forKey:peerID];
	[window addSubview:p];
#warning p was not released 
	[p release];
	[self updateLabels];
}

#pragma mark Buttons
-(IBAction) joinButtonPressed:(id)sender {
	NSLog(@"join pressed");
	actingAsServer = NO;
	//first thing they need to do is find other players
	peerPicker = [[GKPeerPickerController alloc] init];
	[peerPicker setDelegate:self];
	[peerPicker setConnectionTypesMask:GKPeerPickerConnectionTypeNearby /*|GKPeerPickerConnectionTypeOnline*/];
	[peerPicker show];
}

-(void)initGameServer {
	actingAsServer = YES;
	session = [[GKSession alloc] initWithSessionID:@"wangchung" displayName:nil sessionMode:GKSessionModeServer];
	session.delegate = self;
	session.available = YES; 
	[session setDataReceiveHandler:self withContext:nil];
	newButton.hidden = YES;
	stopButton.hidden = NO;
	SlaveBoard *mainBoard = [[SlaveBoard alloc] initWithPeerId:nil];
	[mainBoard setXOffset:0 YOffset:0];
	lastBoard = mainBoard;
	[connectedBoards setObject:mainBoard forKey:session.peerID];
	[mainBoard release];
}

-(IBAction) newButtonPressed:(id)sender {
	NSLog(@"new pressed");
	[self initGameServer];
}

-(IBAction) stopButtonPressed:(id)sender {
	session.available = NO; 
	session.delegate = nil;
	[session setDataReceiveHandler:nil withContext:nil];
	session = nil;
	newButton.hidden = NO;
	stopButton.hidden = YES;
	for (NSString *pid in connectedPeers) {
		[[connectedPeers objectForKey:pid] removeFromSuperview];
	}
	[connectedPeers removeAllObjects];
	[connectedBoards removeAllObjects];
}

- (void) spawnPortal:(NSString *)args {
	int dir = [args intValue];
	UILabel *p = [[UILabel alloc] initWithFrame:CGRectMake((float)GET_PORTAL_POS_X(dir), (float)GET_PORTAL_POS_Y(dir),
														   100.f, 50.f)];
	[p setText:@"here be dragons"];
	[window addSubview:p];
	[p release];
	NSLog(@"Spawn portal in dir %@ => %d", args, dir);
}

//This is to ask all peers that have connected to send theit IDs
-(IBAction) testPressed:(id)sender {
	[self requestConnectingClientIdentity];
}

-(void) requestConnectingClientIdentity {
	NSString *string = [NSString stringWithFormat:@"sendID: %@",session.peerID];
	NSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];
	//[session sendData:data toPeers:[NSArray arrayWithObject:peerID] withDataMode:GKSendDataUnreliable error:nil];
	NSError *error;
	if (![session sendDataToAllPeers:data withDataMode:GKSendDataUnreliable error:&error]) {
		NSLog(@"ERROR: %@",error);
	}
	
}

-(void)player:(PlayerView *)thePlayer didFire:(Bullet *)theBullet {
	[bullets addObject:theBullet];
	[window addSubview:theBullet];
	[theBullet release];
	//[window addSubview:theBullet];
	//[bullets setObject:thePlayer forKey:theBullet];
	
	
}

@end
